plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.juneox'
version = '1.0.0'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.github.openfeign.querydsl:querydsl-jpa:5.2:jakarta'
	implementation 'io.github.openfeign.querydsl:querydsl-sql:5.2'

	//open api
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.0.2'

	annotationProcessor 'io.github.openfeign.querydsl:querydsl-apt:5.2:jakarta'
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

task copyJar(type: Copy){
	from 'build/libs'
	include '*.jar'

	into './appbuild/'
}

task copyCustomDirectory(type: Copy){
	from './sample'
	into './appbuild/sample'
}

build.finalizedBy(copyJar, copyCustomDirectory)

clean.doLast {
	def appbuildDir = file('appbuild')

	if (appbuildDir.exists()) {
		println 'Cleaning appbuild directory'
		appbuildDir.deleteDir()
	}
}
